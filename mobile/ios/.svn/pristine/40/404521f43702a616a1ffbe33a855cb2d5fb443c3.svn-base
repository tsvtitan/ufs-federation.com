//
//  UFSDetailVC.m
//  UFS
//
//  Created by mihail on 27.08.13.
//  Copyright (c) 2013 Moskovchenko M. All rights reserved.
//

#import "UFSDetailVC.h"
#import "AnalyticsCounter.h"

static const NSString *newsHtml = @""
"<html>"
"<head>"
"<style type=\"text/css\">"
"body{margin:10; max-width: 300px!important; padding:0 5px 0 5px;word-wrap: break-word !important;color:#333333 !important;background-color:#FFF; font-family:Helvetica !important;}"
"h2,h3,h1{margin:5.0px 0 5.0px 0;}"
"p,p b{text-align:left;color:rgb(3,68,124);padding:0;margin:0;font-size:90%%;word-wrap: break-word !important;}"
"br { margin: 0px 0px 0px 0px; }"
"p {margin-bottom: 10px;}"
"body,h2{ font-size:%fpx;}"
"table{font-size: 14px;}"
"tr td{text-align:center;font-size:10pt;word-wrap: break-word !important;}"
"table,table tr, tr td{padding:0 !important;margin:0 !important;white-space: auto !important;}"
"td{width:auto !important;}"
"div{overflow-y:scroll !important;max-width: 310px !important;}"
".image{min-height:40px;padding: 0;margin:0;border: 1px;max-width:310px!important;}"
".usual,img,iframe,iframe img{width:auto;height:auto;max-width:300px!important;padding:0;margin:0;}"
".image img{padding:0px;width:300px;}"
"a .grayLink{text-decoration:none; border-bottom:#777 solid 1px; color:#777;}"
"body, h2:{font-family:Helvetica!important;}"
"h1:{font-family:Helvetica;}"
//"h2, h3, span, p, table:{font-family:SiemensSans-Bold !important;}"
".pic{position:absolute;margin-left:0;margin-top:18;z-index:0}"
//".stabs{width:100px !important;color:#990000 !important}"
"</style>"
"</head>"
"<body>"
"<h1 style=\"padding:0;margin:0;line-height: 1;text-width:bold;font-family:Helvetica;font-size:%fpx;color:rgb(98,125,146);\" id = \"caption\">%@</h1>"
"<br>"
"<span style=\"margin:0px;padding:2px;line-height: 1;text-width:bold;margin-bottom:-25px;font-family:Helvetica ;font-size:%fpx;color:rgb(155,171,183);\">%@</span>"//time
"<br>"

"<br>"
"<p style=\"padding-bottom:-5px;float:left;font-family:Helvetica  !important; color:rgb(3,68,124);\">%@</p>"
"<br>"
"<br><br>"

"</body>"
"</html>";


@interface UFSDetailVC ()
{
    UIActivityIndicatorView *indicator;
    UIImageView *imageForNews;
}

@end

@implementation UFSDetailVC

@synthesize fetchedResultsController;

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
        pdfCount = 0;
    }
    return self;
}
-(id)initWithNewsId:(NSInteger)newsID CategoryID:(NSInteger)cID andSubcategoryID:(NSInteger)subID
{
    newsId = newsID;
    self = [self initWithNibName:nil bundle:nil];
    {
        if ([UFSLoader reachable])
        {
            [UFSLoader requestPostAuth:@"" andWidth:@""];
            [UFSLoader requestPostMainNews:@"" CategoryId:[NSString stringWithFormat:@"%d",cID]
                          andSubCategoryId:[NSString stringWithFormat:@"%d",subID] andNewsID:[NSString stringWithFormat:@"%d",newsId]];
            [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(loadFaild:) name:kNotificationRequestFaild object:nil];

        }
        NSError *error = nil;
        if (![[self fetchedResultsController] performFetch:&error]) {
            NSLog(@"Unresolved error %@, %@", error, [error userInfo]);
        }


    }
    
    return self;
}

-(void) dealloc
{
 
    /* tsv */
    [keywordButtons release];
    keywordButtons = nil;
    subscribeButton = nil;
    /* tsv */
    
    [[NSNotificationCenter defaultCenter] removeObserver:self];
    fetchedResultsController.delegate = nil;
    relatedTV.delegate=nil;
    relatedTV.dataSource = nil;
//    imageForNews.tapDelegate = nil;
//    SAFE_KILL(relatedTV);
    SAFE_KILL(fetchedResultsController);
    
    [super dealloc];
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    
    /* tsv */
    [[NSNotificationCenter defaultCenter] removeObserver:self];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(afterImageLoad:) name:kNotificationImageLoaded object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(afterImageLoad:) name:kNotificationImageLoadFailed object:nil];
    /* tsv */

    [self.view setBackgroundColor:[UIColor whiteColor]];
    bgScroll = [[UIScrollView alloc] initWithFrame:CGRectMake(0, 0, self.view.width, self.view.height)];
    [bgScroll setBackgroundColor:[UIColor whiteColor]];
    [self.view addSubview:bgScroll];
    bgScroll.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;
    [bgScroll release];
    newsWebView = [[UIWebView alloc] initWithFrame:CGRectMake(0, 0, self.view.width, 1)];
    [newsWebView setBackgroundColor:[UIColor clearColor]];
    [newsWebView.scrollView setScrollEnabled:false];
    [newsWebView setDelegate:self];
    
    [bgScroll addSubview:newsWebView];
    [newsWebView release];
    

    UIImage *imgBtn = [UIImage imageNamed:@"icn_nav_back"];
    UIButton *backbutton = [[UIButton alloc] initWithFrame:CGRectMake(5.0f, (self.view.frame.size.height - 30)/2.0f, 30.0f, 30.0f)];
    [backbutton setBackgroundImage:imgBtn forState:UIControlStateNormal];
    [backbutton addTarget:self action:@selector(BackButtonTapped:) forControlEvents:UIControlEventTouchUpInside];
    [backbutton.titleLabel setTextAlignment:NSTextAlignmentCenter];
    self.navigationItem.leftBarButtonItem = [[[UIBarButtonItem alloc] initWithCustomView:backbutton] autorelease];
    [backbutton release];

    imageForNews = [[UIImageView alloc] initWithFrame:CGRectMake(10, newsWebView.height+5, 300, 200)];
    [imageForNews setBackgroundColor:[UIColor clearColor]];
    imageForNews.tag=300;
    [imageForNews.layer setBorderColor:RGBA(152, 187, 209, 1.0f).CGColor];
    [imageForNews.layer setBorderWidth:0.7f];
    [imageForNews.layer setCornerRadius:5.0f];
    [bgScroll addSubview:imageForNews];
    [imageForNews release];
    
    [imageForNews setHidden:YES];
    
    // Notify Lable And TableView
    notifyLabel = [[UILabel alloc] initWithFrame:CGRectMake(10, imageForNews.height+10, bgScroll.width-20, 20)];
    notifyLabel.text = @"Обзоры по этой теме:";
    notifyLabel.backgroundColor = [UIColor clearColor];
    notifyLabel.font = [UIFont fontWithName:@"Helvetica-Bold" size:14];
    notifyLabel.textColor = RGBA(155, 171, 183, 1.0f);
    [bgScroll addSubview:notifyLabel];
    [notifyLabel release];
    [notifyLabel setHidden:YES];
    
    relatedTV = [[UITableView alloc] initWithFrame:CGRectMake(10, notifyLabel.height+5, bgScroll.width-20, (40.0f*[_newsObj.relatedLinks allObjects].count))
                                             style:UITableViewStylePlain];
    [relatedTV setBackgroundColor:[UIColor clearColor]];
    [relatedTV setSeparatorStyle:UITableViewCellSeparatorStyleNone];
    [relatedTV setScrollEnabled:false];
    [bgScroll addSubview:relatedTV];
    [relatedTV release];
    [relatedTV setHidden:YES];
    
    /* tsv */
    keywordButtons = [[UICheckButtonList alloc] initWithFrame:CGRectMake(14, relatedTV.height+34, bgScroll.width-10, 20)];
    [keywordButtons setFont:[UIFont systemFontOfSize:12]];
    [keywordButtons setMinimumWidth:26.0f];
    [keywordButtons setAutomaticResize:YES];
    [keywordButtons setCornerRadius:1.0f];
    [keywordButtons setBorderColor:[UIColor lightGrayColor].CGColor];
    [keywordButtons setLabelMargin:3.0f];
    [keywordButtons setBottomMargin:3.0f];
    [keywordButtons setBorderWidth:0.0f];
    [keywordButtons setLeftOffset:24.0f];
    [keywordButtons setImageChecked:[UIImage imageNamed:@"btn_keyword_selected"]];
    [keywordButtons setImageUnchecked:[UIImage imageNamed:@"btn_keyword"]];
    [keywordButtons setStrechInsets:UIEdgeInsetsMake(4, 24, 20, 26)];
    [keywordButtons setHidden:YES];
    [keywordButtons setDelegate:self];
    
    [bgScroll addSubview:keywordButtons];
    
    UIFont *subscribeFont = [UIFont systemFontOfSize:14];
    NSString *subscribeTitle = @"Управление подпиской";
    CGSize titleSize = [subscribeTitle sizeWithFont:subscribeFont];
    
    subscribeButton = [UIButton buttonWithType:UIButtonTypeCustom];
    subscribeButton.titleLabel.font = subscribeFont;

    [subscribeButton setFrame:CGRectMake(bgScroll.frame.size.width/2 - titleSize.width/2, keywordButtons.height+10, titleSize.width + 40, 35.0f)];
    [subscribeButton setAutoresizesSubviews:NO];
    [subscribeButton setAutoresizingMask:UIViewAutoresizingFlexibleLeftMargin | UIViewAutoresizingFlexibleRightMargin];
    
    [subscribeButton setTitle:subscribeTitle forState:UIControlStateNormal];
    [subscribeButton setTitle:subscribeTitle forState:UIControlStateDisabled];
    
    [subscribeButton setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
    [subscribeButton setTitleColor:[UIColor darkGrayColor] forState:UIControlStateDisabled];
    
    [subscribeButton setBackgroundImage:[UIImage imageNamed:@"btn_default"] forState:UIControlStateNormal];
    [subscribeButton setBackgroundImage:[UIImage imageNamed:@"btn_default"] forState:UIControlStateHighlighted];
    [subscribeButton setHidden:YES];
    [subscribeButton setEnabled:NO];
    [bgScroll addSubview:subscribeButton];
    /* tsv */
    
    if (self.type==1)
    {
         labelFoeLoading = [[UILabel alloc] initWithFrame:self.view.bounds];
         [labelFoeLoading setBackgroundColor:RGBA(231, 234, 236, 1.0f)];
         [self.view addSubview:labelFoeLoading];
         [labelFoeLoading release];
    }
    
    if (self.newsObj)
    {
        [self setContentForWebView];
        
    } else if (fetchedResultsController.fetchedObjects.count) {
        
        /*self.newsObj = fetchedResultsController.fetchedObjects.lastObject;
        if ([_newsObj.text length])
        {
            [self setContentForWebView];
        }*/
    }

    indicator = [[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleWhiteLarge];
    //[indicator setCenter:CGPointMake(self.view.center.x, self.view.center.y-44)];
    /* tsv */indicator.center = CGPointMake(self.view.width/2, self.view.height/2-indicator.frame.size.height/2);
    [indicator setColor:[UIColor grayColor]];
    [self.view addSubview:indicator];
    [indicator startAnimating];
    [indicator release];

    
}

- (void)selectedButton:(UICheckButton *)button buttonIndex:(NSInteger)buttonIndex;
{
    BOOL enabled = NO;
    for (int i=0; i<keywordButtons.subviews.count;i++) {
        UICheckButtonView *view = (UICheckButtonView*)[keywordButtons.subviews objectAtIndex:i];
        enabled = (view.button.isEnabled && view.button.isChecked)?YES:enabled;
        if (enabled) {
            break;
        }
    }
    [subscribeButton setEnabled:enabled];
}

-(void) viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
}

-(void)viewWillDisappear:(BOOL)animated
{
    [[NSNotificationCenter defaultCenter] removeObserver:self];
    fetchedResultsController.delegate = nil;
    [super viewWillDisappear:animated];
}

-(void)viewDidAppear:(BOOL)animated
{
    [super viewDidAppear:animated];
    fetchedResultsController.delegate = self;
}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
}

- (void)webViewDidFinishLoad:(UIWebView *)webView
{
    if (self.type!=1)
        [indicator stopAnimating];
    
    pdfCount = 0;
    NSString * h = [webView stringByEvaluatingJavaScriptFromString:@"document.getElementById(\"caption\").scrollHeight;"];

    NSArray *arr = [_newsObj.files allObjects];
    for (int i=0;i<arr.count;i++)
    {
        FileImageUrlDB *filePdf = arr[i];
        if ([filePdf.extension isEqualToString:@"pdf"])
        {
            pdfCount++;
        }
    }
    
    if (pdfCount)
    {

        float heightForPdfButton = [h floatValue]-10;
        UIButton *pdfButton = [[UIButton alloc] initWithFrame:CGRectMake(self.view.width-70, heightForPdfButton+20, 50, 50)];
        [pdfButton setImage:[UIImage imageNamed:@"btn_download"] forState:UIControlStateNormal];
        [pdfButton addTarget:self action:@selector(pdfButtonTap:) forControlEvents:UIControlEventTouchUpInside];
        [newsWebView.scrollView addSubview:pdfButton];
        [pdfButton release];
    }


    float height = webView.scrollView.contentSize.height;

    [newsWebView setFrame:CGRectMake(0, 0, self.view.width, height)];
    
    [bgScroll setContentSize:CGSizeMake(self.view.width, height)];
           

    if (self.type==1)
    {
        
        if (imageForNews.tag==400)
        {
            imageForNews.frame = CGRectMake(10, height, 300, 200);
            imageForNews.hidden = NO;
            height+=220;
        }
        
    }
    
    [bgScroll setContentSize:CGSizeMake(self.view.width, height)];
    if ([_newsObj.relatedLinks allObjects].count)
    {
        notifyLabel.frame = CGRectMake(10, height, bgScroll.width-20, 20);
        [notifyLabel setHidden:NO];
        height+=20;
        relatedTV.frame = CGRectMake(10, height+5, bgScroll.width-20, (40.0f*[_newsObj.relatedLinks allObjects].count)+5);
        relatedTV.delegate = self;
        relatedTV.dataSource=self;
        [relatedTV setHidden:NO];
        height+=relatedTV.height+10;
    }
    
    /* tsv */
    [bgScroll setContentSize:CGSizeMake(self.view.width, height)];
    if ([_newsObj.keywords allObjects].count) {
    
        NSArray *kwds = [_newsObj.keywords allObjects];
        
        if (kwds.count>0) {

            NSArray *sorted = [kwds sortedArrayUsingComparator:^NSComparisonResult(NewsKeywordDB* obj1, NewsKeywordDB* obj2) {
                return [obj1.index compare:obj2.index];
            }];
            
            NSMutableArray *buttons = [[NSMutableArray alloc] init];
            
            for (int i=0; i<sorted.count; i++) {
                NewsKeywordDB *word = (NewsKeywordDB *)[sorted objectAtIndex:i];
                [buttons addObject:word.keyword];
            }
        
            keywordButtons.frame = CGRectMake(14, height+5, bgScroll.width-28, keywordButtons.frame.size.height);
            [keywordButtons setButtons:buttons];
            [keywordButtons setHidden:NO];
            height+= keywordButtons.height+10;
            
            BOOL enabled = NO;
            for (int i=0; i<keywordButtons.subviews.count;i++) {
                UICheckButtonView *view = (UICheckButtonView*)[keywordButtons.subviews objectAtIndex:i];
                view.button.isChecked = YES; // check in keywords
                enabled = (!enabled && view.button.isChecked)?YES:enabled;
            }
            
            subscribeButton.frame = CGRectMake(bgScroll.frame.size.width/2 - subscribeButton.frame.size.width/2,
                                               height+5, subscribeButton.frame.size.width, subscribeButton.frame.size.height);
            [subscribeButton setHidden:NO];
            [subscribeButton setEnabled:enabled];
            height+= subscribeButton.height+10;
        }
    }
    /* tsv */
    
    [bgScroll setContentSize:CGSizeMake(self.view.width, height+5)];

}

/* tsv */
-(void)afterImageLoad:(NSNotification *)notify
{
    
    if ([notify.object isKindOfClass:[NSString class]]) {
        
        if ([notify.name isEqualToString:kNotificationImageLoaded]) {
            
            NSString *imagePath = (NSString *)notify.object;
            
            [imageForNews setTag:400];
            [imageForNews setImage:[FileSystem imageWithPath:imagePath]];
            
            CATransition *animation = [CATransition animation];
            [animation setDuration:0.5f];
            [animation setType:kCATransitionFade];
            [animation setTimingFunction:[CAMediaTimingFunction  functionWithName:kCAMediaTimingFunctionEaseInEaseOut]];
            [animation setRemovedOnCompletion:YES];
            [labelFoeLoading.layer addAnimation:animation forKey:nil];
            [labelFoeLoading setHidden:YES];
            labelFoeLoading = nil;
            [indicator stopAnimating];
            UIButton *imageButton = [[UIButton alloc] initWithFrame:imageForNews.frame];
            
            imageButton.backgroundColor = [UIColor clearColor];
            imageButton.tag = 8888;
            [imageButton addTarget:self action:@selector(imageNewsTaped:) forControlEvents:UIControlEventTouchUpInside];
            [bgScroll addSubview:imageButton];
            [imageButton release];
            
            [self setElementPosition];
            
        } else {
            
            CATransition *animation = [CATransition animation];
            [animation setDuration:0.5f];
            [animation setType:kCATransitionFade];
            [animation setTimingFunction:[CAMediaTimingFunction  functionWithName:kCAMediaTimingFunctionEaseInEaseOut]];
            [animation setRemovedOnCompletion:YES];
            [labelFoeLoading.layer addAnimation:animation forKey:nil];
            [labelFoeLoading setHidden:YES];
            labelFoeLoading = nil;
            [indicator stopAnimating];
            
            [imageForNews removeFromSuperview];
            [imageForNews setImage:nil];
            [self setElementPosition];

        }
    }
}
/* tsv */

-(void) setContentForWebView
{
    self.titleText = [_newsObj title];
    if (self.type==1)
    {
        NSArray *arr = [_newsObj.files allObjects];
        arr = [arr filteredArrayUsingPredicate:[NSPredicate predicateWithFormat:@"type==1"]];
        NSLog(@"%@",arr);
        if (arr.count)
        {
            arr = [arr sortedArrayUsingDescriptors:@[[NSSortDescriptor sortDescriptorWithKey:@"url" ascending:YES]]];
            FileImageUrlDB *filePdf = arr[0];
            NSString *fileName = [NSString stringWithFormat:kServerBasePath,filePdf.url];
 
            if (fileName.length)
            {
                if ([FileSystem pathExisted:fileName])
                {
                    NSLog(@"file name %@",fileName);
                    [imageForNews setTag:400];
                    [imageForNews setImage:[FileSystem imageWithPath:fileName]];
                    
                    /* tsv */
                    CATransition *animation = [CATransition animation];
                    [animation setDuration:0.5f];
                    [animation setType:kCATransitionFade];
                    [animation setTimingFunction:[CAMediaTimingFunction  functionWithName:kCAMediaTimingFunctionEaseInEaseOut]];
                    [animation setRemovedOnCompletion:YES];
                    [labelFoeLoading.layer addAnimation:animation forKey:nil];
                    [labelFoeLoading setHidden:YES];
                    labelFoeLoading = nil;
                    [indicator stopAnimating];
                    UIButton *imageButton = [[UIButton alloc] initWithFrame:imageForNews.frame];
                    
                    imageButton.backgroundColor = [UIColor clearColor];
                    imageButton.tag = 8888;
                    [imageButton addTarget:self action:@selector(imageNewsTaped:) forControlEvents:UIControlEventTouchUpInside];
                    [bgScroll addSubview:imageButton];
                    [imageButton release];
                    
                    [self setElementPosition];
                    /* tsv */
                   
                } else {

                    /* tsv */
                    
                    NSString *imageURL = filePdf.url;
                    NSString *imagePath = [imageURL stringByReplacingOccurrencesOfString:@"files" withString:@"image"];
                    [UFSLoader getImage:imageURL AndName:imagePath];
                   
                   /* tsv */
                }
            }
        }
    }

    //NSString *innerHtml=[NSString stringWithFormat:(NSString*)newsHtml,(13+ 1.0f*2), (15+ 1.0f*2), [_newsObj title].length ? [_newsObj title] : @"" , (12+ 1.0f*2), [_newsObj strDate], [_newsObj text].length ? [_newsObj text] : @""];
    
    /* tsv */
    
    NSString *temp = [_newsObj text];
    temp = [temp stringByReplacingOccurrencesOfString:@"\r\n" withString:@"<br>"];
    if (!temp.length) {
        temp = @"";
    }
    
    NSString *innerHtml=[NSString stringWithFormat:(NSString*)newsHtml,(13+ 1.0f*2), (15+ 1.0f*2), [_newsObj title].length ? [_newsObj title] : @"" , (12+ 1.0f*2), [_newsObj strDate], temp];
    
    /* tsv */
    
    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES);
    
    NSString* kCachePath = nil;
    kCachePath =[[paths objectAtIndex:0] stringByAppendingPathComponent:@"iDEastCache//http:"];

    kCachePath = [kCachePath stringByReplacingOccurrencesOfString:@"/" withString:@"//"];
    kCachePath = [kCachePath stringByReplacingOccurrencesOfString:@" " withString:@"%20"];
    kCachePath = [NSString stringWithFormat:@"file:/%@//", kCachePath];
    [newsWebView loadHTMLString:innerHtml baseURL:[NSURL URLWithString:kCachePath]];
   
}

- (void)updateImageInWeb:(NSNotification *)notification
{
}

-(void)BackButtonTapped: (UIButton *)sender
{
    [self.navigationController popViewControllerAnimated:YES];
}

-(void)pdfButtonTap: (UIButton *)sender
{
    NSArray *arr = [_newsObj.files allObjects];
    arr = [arr filteredArrayUsingPredicate:[NSPredicate predicateWithFormat:@"type==%@",@(3)]];
    
    FileImageUrlDB *filePdf = arr[0];
    if (arr.count>1)
    {
        NSLog(@"PDF count %d",pdfCount);
        NSSortDescriptor *sortD= [NSSortDescriptor sortDescriptorWithKey:@"name" ascending:YES];
        NSArray *sortedArr = [arr sortedArrayUsingDescriptors:[NSArray arrayWithObject:sortD]];
        PdfTableViewController *pdfTView = [[PdfTableViewController alloc] initWithNibName:nil bundle:nil];
        [pdfTView setPdfArray:sortedArr];
        [pdfTView setNameOfNews:_newsObj.title];
        [self.navigationController pushViewController:pdfTView animated:YES];
        [pdfTView release];
    }
    else
    {
        ReaderViewController *readerPDF = [[ReaderViewController alloc] initWithReaderDocumentURL:filePdf.url AndName:filePdf.url];
        [readerPDF setPdfName:_newsObj.title];
        [self.navigationController pushViewController:readerPDF animated:YES];
        [readerPDF release];
    }
}

- (void) setElementPosition
{
    
    float height = newsWebView.scrollView.contentSize.height;
    
    [newsWebView setFrame:CGRectMake(0, 0, self.view.width, height)];
    if (imageForNews)
    {
        imageForNews.frame = CGRectMake(10, height, 300, 200);
        imageForNews.hidden = NO;
        [self.view viewWithTag:8888].frame = imageForNews.frame;
        height+=220;
    }
    if ([_newsObj.relatedLinks allObjects].count)
    {
        notifyLabel.frame = CGRectMake(10, height, bgScroll.width-20, 20);
        [notifyLabel setHidden:NO];
        height+=20;
        relatedTV.frame = CGRectMake(10, height+5, bgScroll.width-20, (40.0f*[_newsObj.relatedLinks allObjects].count)+5);
        relatedTV.delegate = self;
        relatedTV.dataSource=self;
        [relatedTV setHidden:NO];
        height+=relatedTV.height+15;
    }
    [bgScroll setContentSize:CGSizeMake(self.view.width, height+5)];

}

- (void)imageNewsTaped:(UIButton *)sender
{
    NSLog(@"image tappppp");
    NSArray *imageArr = [[self.newsObj.files allObjects] filteredArrayUsingPredicate:[NSPredicate predicateWithFormat:@"type==1"]];
    PhotoGalleryVC *photoGalleryVC = [[PhotoGalleryVC alloc] initWithItems:imageArr];
    [photoGalleryVC setTrId:_newsObj.identifier];
    [photoGalleryVC setTitleGallery:@"Фотографии"];
    [self.navigationController pushViewController:photoGalleryVC animated:YES];
    [photoGalleryVC release];
}

#pragma -mark Supported Inteface Orientation
-(BOOL)shouldAutorotate
{
    return NO;
}

- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation
{
   	return  (toInterfaceOrientation == UIInterfaceOrientationPortrait);
}

-(NSUInteger)supportedInterfaceOrientations
{
    return UIInterfaceOrientationMaskPortrait;
}


- (void)controllerDidChangeContent:(NSFetchedResultsController *)controller {
    
    if ((self.fetchedResultsController.fetchedObjects.count > 0))
    {
        self.newsObj = [fetchedResultsController.fetchedObjects objectAtIndex:0];
        [self setContentForWebView];
    }
}

- (NSFetchedResultsController *)fetchedResultsController {
    
    if (fetchedResultsController != nil) {
        return fetchedResultsController;
    }
    
    // Set up the fetched results controller.
    
	// Create the fetch request for the entity.
	NSFetchRequest *fetchRequest = [[NSFetchRequest alloc] init];
	// Edit the entity name as appropriate.
   	NSEntityDescription *entity = [NSEntityDescription entityForName:@"NewsDB" inManagedObjectContext:CoreDataManager.shared.managedObjectContext];
    
	[fetchRequest setEntity:entity];
	
	// Set the batch size to a suitable number.
	[fetchRequest setFetchBatchSize:20];
    [fetchRequest setFetchLimit:20];
    
	// Sort using the timeStamp property..
   
    
    NSArray *sortDescriptors = @[];
    
    NSPredicate * predicatForResult = [NSPredicate predicateWithFormat:@"identifier == %d",newsId];
    [fetchRequest setPredicate : predicatForResult];
	[fetchRequest setSortDescriptors:sortDescriptors];
	 
    // Use the sectionIdentifier property to group into sections.
	
    NSFetchedResultsController *localFetchedResultsController = [[NSFetchedResultsController alloc] initWithFetchRequest:fetchRequest managedObjectContext:CoreDataManager.shared.managedObjectContext sectionNameKeyPath:nil  cacheName:nil];
    localFetchedResultsController.delegate = self;
	self.fetchedResultsController = localFetchedResultsController;
	
	[localFetchedResultsController release];
	[fetchRequest release];
    
    return fetchedResultsController;
}
#pragma -mark Related TableView Delegate & DataSource
- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
{
   if  ((indexPath.row==[_newsObj.relatedLinks allObjects].count-1 || indexPath.row==0) && [_newsObj.relatedLinks allObjects].count>1)
   {
       return 45;
   }
    return 40;
}


- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    NSArray *arr = [_newsObj.relatedLinks allObjects];

    return arr.count;
}

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
    return 1;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    NSArray *arr = [_newsObj.relatedLinks allObjects];
    arr = [arr sortedArrayUsingDescriptors:@[[NSSortDescriptor sortDescriptorWithKey:@"date" ascending:NO]]];
    NSString *cellIdentifier = [NSString stringWithFormat:@"cellId%d",indexPath.row];
    
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];
    if (cell==nil)
    {
        cell = [[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellIdentifier] autorelease];
    
    
        // Configuring cell
        [cell setSelectionStyle:UITableViewCellSelectionStyleNone];
        cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;
        UIImageView *acces = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"icn_arrow"]];
        cell.accessoryView = acces;

        UIImage * btnImage = nil;
        if (indexPath.row==0)
        {
        
            btnImage = [[UIImage imageNamed:@"bg_table_medium_cell_"] resizableImageWithCapInsets:UIEdgeInsetsMake(10, 12, 10, 12)];
        
        } else if (indexPath.row==arr.count-1) {
        
            btnImage = [[UIImage imageNamed:@"bg_table_medium_cell"] resizableImageWithCapInsets:UIEdgeInsetsMake(10, 12, 10, 12)];
            cell.accessoryType = UITableViewCellAccessoryNone;
            cell.accessoryView = nil;
            [acces setCenter:CGPointMake(self.view.width-34, 20)];
            [cell.contentView addSubview:acces];
        
        } else {
            btnImage = [[UIImage imageNamed:@"bg_table_middle_cell"] resizableImageWithCapInsets:UIEdgeInsetsMake(5, 10, 5, 10)];
        }
        
        if (arr.count==1)
        {
            btnImage = [[UIImage imageNamed:@"btn_big_round"] stretchableImageWithLeftCapWidth:10 topCapHeight:0];
       
        }
        NSString *str =  ((NewsDB *)[arr objectAtIndex:indexPath.row]).title;
        [acces release];
        NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
        
        [dateFormatter setDateStyle:NSDateFormatterShortStyle]; // 2013-01-24 15:46:53
        NSString *strDate = [dateFormatter stringFromDate:[NSDate dateWithTimeIntervalSince1970:[((NewsDB *)[arr objectAtIndex:indexPath.row]).date intValue]]];
        [dateFormatter release];

        UIImageView *bgImage = [[UIImageView alloc] initWithFrame:cell.backgroundView.bounds];
        [bgImage setImage:btnImage];
        cell.backgroundView = bgImage;
       
        int x=0;
        if (indexPath.row==0 && arr.count!=1)
            x+=5;
        UILabel *dateLabel = [[UILabel alloc] initWithFrame:CGRectMake(15, 3+x, tableView.width-40, 15)];
        [dateLabel setBackgroundColor:[UIColor clearColor]];
        [dateLabel setFont:[UIFont fontWithName:@"Helvetica" size:12]];
        [dateLabel setTextColor:RGBA(133, 156, 182, 1.0f)];
        [dateLabel setText:strDate];
        [cell.contentView addSubview:dateLabel];
        [dateLabel release];

        UILabel *titleLable = [[UILabel alloc] initWithFrame:CGRectMake(15, 16+x, tableView.width-40, 20)];
        [titleLable setBackgroundColor:[UIColor clearColor]];
        [titleLable setFont:[UIFont fontWithName:@"Helvetica" size:15]];
        [titleLable setTextColor:RGBA(3, 68, 124, 1.0f)];
        [titleLable setText:str];
        [cell.contentView addSubview:titleLable];
        [titleLable release];
    }
    return cell;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    NSArray *arr = [_newsObj.relatedLinks allObjects];
    arr = [arr sortedArrayUsingDescriptors:@[[NSSortDescriptor sortDescriptorWithKey:@"date" ascending:NO]]];
    
    NewsDB *db = ((NewsDB *)[arr objectAtIndex:indexPath.row]);
    
    /* tsv */[AnalyticsCounter eventScreens:self.titles category:db.title action:nil value:nil];
    
    UFSDetailVC *newsDetail = [[UFSDetailVC alloc] initWithNewsId:[db.identifier intValue] CategoryID:[db.categoryID intValue]
                                                 andSubcategoryID:[db.subcategoryID intValue]];
    [newsDetail setType:1];
    /* tsv */newsDetail.titles = self.titles;
    
    [self.navigationController pushViewController:newsDetail animated:YES];
    [newsDetail release];

}
-(void)loadFaild: (NSNotification *) notify
{
    if ([indicator isAnimating])
    {
        [indicator stopAnimating];
        
    }
    
    NSString *messageNotify = @"Загрузка не удалась. Попробуйте позже";
    if (((NSString *)notify.object).length)
    {
        messageNotify = ((NSString *)notify.object);
        NSUserDefaults *userDef = [NSUserDefaults standardUserDefaults];
        [userDef setValue:@"" forKey:kTokenForSession];
        [userDef setValue:@(0) forKey:kTokenExpiredTime];
        [userDef synchronize];
    }
    else
    {
        if ([UFSLoader reachable])
        {
            UIAlertView *alertFaild = [[UIAlertView alloc] initWithTitle:@"Внимание" message:messageNotify delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
            [alertFaild show];
            [alertFaild release];
        }
        else
        {
            if (!fetchedResultsController.fetchedObjects.count)
            {
            }
        }
    }
    ((UIButton *)self.navigationItem.rightBarButtonItem.customView).hidden = true;
}

@end
